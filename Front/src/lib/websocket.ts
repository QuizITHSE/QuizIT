import { useEffect, useRef, useState } from 'react';

interface WebSocketMessage {
  type: string;
  message?: string;
  code?: string;
  data?: any;
  [key: string]: any; // –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
}

class WebSocketManager {
  private ws: WebSocket | null = null;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 3; // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
  private reconnectInterval = 5000; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
  private listeners: Map<string, (data: any) => void> = new Map();
  private isConnecting = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π

  connect(url: string): Promise<void> {
    return new Promise((resolve, reject) => {
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (this.isConnecting || (this.ws && this.ws.readyState === WebSocket.CONNECTING)) {
        console.log('‚ö†Ô∏è WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
        resolve();
        return;
      }

      if (this.ws && this.ws.readyState === WebSocket.OPEN) {
        console.log('‚úÖ WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        resolve();
        return;
      }

      this.isConnecting = true;
      console.log('üîå –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket:', url);
      
      try {
        this.ws = new WebSocket(url);
        
        this.ws.onopen = () => {
          console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
          this.isConnecting = false;
          this.reconnectAttempts = 0;
          resolve();
        };

        this.ws.onmessage = (event) => {
          try {
            const message = JSON.parse(event.data);
            console.log('üì• –ü–û–õ–£–ß–ï–ù–û WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', {
              type: message.type,
              timestamp: new Date().toISOString(),
              rawData: event.data,
              parsedMessage: message
            });
            
            // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            const handler = this.listeners.get(message.type);
            if (handler) {
              console.log(`üéØ –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–∏–ø–∞ "${message.type}"`);
              // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ data
              handler(message);
            } else {
              console.log(`‚ö†Ô∏è –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ç–∏–ø–∞ "${message.type}"`);
            }
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error, 'Raw data:', event.data);
          }
        };

        this.ws.onclose = (event) => {
          console.log('‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω:', event.code, event.reason);
          this.isConnecting = false;
          this.attemptReconnect(url);
        };

        this.ws.onerror = (error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error);
          this.isConnecting = false;
          reject(error);
        };
      } catch (error) {
        reject(error);
      }
    });
  }

  private attemptReconnect(url: string) {
    if (this.reconnectAttempts < this.maxReconnectAttempts) {
      this.reconnectAttempts++;
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts} —á–µ—Ä–µ–∑ ${this.reconnectInterval}ms`);
      
      setTimeout(() => {
        if (!this.isConnecting && (!this.ws || this.ws.readyState === WebSocket.CLOSED)) {
          this.connect(url).catch(console.error);
        }
      }, this.reconnectInterval);
    } else {
      console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    }
  }

  send(type: string, data: any) {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      const message = { type, data };
      console.log('üì§ –û–¢–ü–†–ê–í–ö–ê WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', {
        type: message.type,
        data: message.data,
        timestamp: new Date().toISOString(),
        fullMessage: message
      });
      this.ws.send(JSON.stringify(message));
    } else {
      console.error('‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', { type, data });
    }
  }

  onMessage(type: string, handler: (data: any) => void) {
    this.listeners.set(type, handler);
  }

  disconnect() {
    console.log('üîå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket');
    this.isConnecting = false;
    this.reconnectAttempts = this.maxReconnectAttempts; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if (this.ws) {
      this.ws.close();
      this.ws = null;
    }
  }

  isConnected(): boolean {
    return this.ws !== null && this.ws.readyState === WebSocket.OPEN;
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const wsManager = new WebSocketManager();

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è WebSocket –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export const useWebSocket = (url: string) => {
  const [isConnected, setIsConnected] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const wsRef = useRef<WebSocketManager | null>(null);

  useEffect(() => {
    const connect = async () => {
      try {
        await wsManager.connect(url);
        setIsConnected(true);
        setError(null);
        wsRef.current = wsManager;
      } catch (err) {
        setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket');
        setIsConnected(false);
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err);
      }
    };

    connect();

    return () => {
      wsManager.disconnect();
      setIsConnected(false);
    };
  }, [url]);

  const sendMessage = (type: string, data: any) => {
    if (wsRef.current) {
      wsRef.current.send(type, data);
    }
  };

  const onMessage = (type: string, handler: (data: any) => void) => {
    if (wsRef.current) {
      wsRef.current.onMessage(type, handler);
    }
  };

  return {
    isConnected,
    error,
    sendMessage,
    onMessage,
    disconnect: () => wsManager.disconnect()
  };
};

export default WebSocketManager;
