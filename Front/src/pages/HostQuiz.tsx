import React, { useEffect, useState } from 'react';
import { useSearchParams, useNavigate } from 'react-router-dom';
import { doc, getDoc, collection, getDocs } from 'firebase/firestore';
import { onAuthStateChanged } from 'firebase/auth';
import { db, auth } from '@/lib/firebase';
import { Button } from '@/components/ui/button';
import { GraduationCap, Users, Clock, Play, Pause, Square } from 'lucide-react';
import QuizContent from '@/components/QuizContent';
import RoundResults from '@/components/RoundResults';
import GameResults from '@/components/GameResults';

interface Question {
  id: string;
  question: string;
  options: string[];
  correct: number[];
  type: string;
  points: string;
  timeLimit: number;
}

interface Quiz {
  id: string;
  title: string;
  questions: string[];
  owner: string;
  createdAt: any;
  updatedAt?: any;
}

interface QuestionData {
  question: string;
  type: string;
  timeLimit: number;
  options: string[];
  points: number;
}

interface RoundResultsData {
  right: number;
  wrong: number;
  by_answer: { [key: string]: number };
  question_points: number;
  total_possible_points: number;
  total_earned_points: number;
}

interface LeaderboardEntry {
  place: number;
  username: string;
  score: number;
  user_id: string;
}

interface GameResultsData {
  leaderboard: LeaderboardEntry[];
  total_questions: number;
  total_players: number;
}

const HostQuiz: React.FC = () => {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const [quiz, setQuiz] = useState<Quiz | null>(null);
  const [questions, setQuestions] = useState<Question[]>([]);
  const [isTeacher, setIsTeacher] = useState(false);
  const [loading, setLoading] = useState(true);
  
  // WebSocket states
  const [ws, setWs] = useState<WebSocket | null>(null);
  const [wsConnected, setWsConnected] = useState(false);
  const [gameCode, setGameCode] = useState<string | null>(null);
  const [authSent, setAuthSent] = useState(false);
  const [authSuccess, setAuthSuccess] = useState(false);
  const [quizCreated, setQuizCreated] = useState(false);
  const [players, setPlayers] = useState<string[]>([]);
  const [quizStarted, setQuizStarted] = useState(false);
  const [currentQuestion, setCurrentQuestion] = useState<QuestionData | null>(null);
  const [timeLeft, setTimeLeft] = useState(0);
  const [timerActive, setTimerActive] = useState(false);
  const [roundResults, setRoundResults] = useState<RoundResultsData | null>(null);
  const [currentQuestionNumber, setCurrentQuestionNumber] = useState(0);
  const [gameResults, setGameResults] = useState<GameResultsData | null>(null);

  const quizId = searchParams.get('id');

  // WebSocket connection
  useEffect(() => {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É...');
    const websocket = new WebSocket('ws://localhost:8765');
    
    websocket.onopen = () => {
      console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
      setWsConnected(true);
      setWs(websocket);
    };

    websocket.onmessage = (event) => {
      try {
        const message = JSON.parse(event.data);
        console.log('üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á players –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if (message.players !== undefined) {
          console.log('üë• –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:', message);
          setPlayers(message.players || []);
          return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á question –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if (message.question !== undefined) {
          console.log('‚ùì –ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å:', message);
          setCurrentQuestion(message);
          setTimeLeft(message.timeLimit || 60);
          setTimerActive(true);
          setCurrentQuestionNumber(prev => prev + 1); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
          return;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∏–ø–æ–º
        switch (message.type) {
          case 'welcome':
            console.log('üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', message.message);
            break;
            
          case 'auth_attempt':
            console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', message.message);
            break;
            
          case 'auth_success':
            console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', message.message);
            setAuthSuccess(true);
            break;
            
          case 'game_created':
            console.log('üéÆ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:', message);
            console.log('üîë –ö–æ–¥ –∏–≥—Ä—ã:', message.code);
            setGameCode(message.code);
            break;
            
          case 'quiz_info':
            console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–≤–∏–∑–µ:', message);
            break;
            
          case 'creating_game':
            console.log('üéÆ –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã:', message.message);
            break;
            
          case 'round_results':
            console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–∞:', message);
            setRoundResults(message.data);
            setCurrentQuestion(null); // –°–∫—Ä—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            setTimerActive(false); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            break;
            
          case 'game_finished':
            console.log('üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', message);
            setGameResults({
              leaderboard: message.leaderboard || [],
              total_questions: message.total_questions || 0,
              total_players: message.total_players || 0
            });
            setCurrentQuestion(null); // –°–∫—Ä—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
            setRoundResults(null); // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–∞
            setTimerActive(false); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            break;
            
          case 'last_question_completed':
            console.log('üîö –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω:', message.message);
            break;
            
          case 'answers':
            console.log('üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤:', message);
            break;
            
          default:
            console.log('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', message.type);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    };

    websocket.onclose = (event) => {
      console.log('‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω:', event.code, event.reason);
      setWsConnected(false);
      setWs(null);
      setAuthSent(false);
      setAuthSuccess(false);
      setQuizCreated(false);
      setPlayers([]);
      setQuizStarted(false);
      setCurrentQuestion(null);
      setTimeLeft(0);
      setTimerActive(false);
      setRoundResults(null);
      setCurrentQuestionNumber(0);
      setGameResults(null);
    };

    websocket.onerror = (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error);
      setWsConnected(false);
    };

    return () => {
      console.log('üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
      websocket.close();
    };
  }, []);

  // Send auth message when connected and user is authenticated
  useEffect(() => {
    const sendAuthMessage = async () => {
      if (wsConnected && ws && !authSent) {
        console.log('üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        
        // Wait for auth state to be ready
        const unsubscribe = onAuthStateChanged(auth, async (user) => {
          if (user) {
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –∏—â–µ–º document ID...');
            
            try {
              // Find the user document ID from the users collection
              const { collection: firestoreCollection, query: firestoreQuery, where: firestoreWhere, getDocs: firestoreGetDocs } = await import('firebase/firestore');
              const userQuery = firestoreQuery(
                firestoreCollection(db, 'users'), 
                firestoreWhere('userId', '==', user.uid)
              );
              
              const userSnapshot = await firestoreGetDocs(userQuery);
              console.log('üìä User query results:', {
                empty: userSnapshot.empty,
                size: userSnapshot.size,
                docs: userSnapshot.docs.map(doc => ({ id: doc.id, data: doc.data() }))
              });
              
              if (userSnapshot.empty) {
                console.error('‚ùå User document not found for UID:', user.uid);
                unsubscribe();
                return;
              }
              
              const userDocId = userSnapshot.docs[0].id;
              console.log('‚úÖ Found user document ID:', userDocId);
              
              // Send auth message with the document ID
              const authMessage = { user_id: userDocId };
              console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AUTH:', authMessage);
              ws.send(JSON.stringify(authMessage));
              setAuthSent(true);
              unsubscribe(); // Clean up the listener
              
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ user document:', error);
              unsubscribe();
            }
          } else {
            console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
            unsubscribe(); // Clean up the listener
          }
        });
      }
    };

    sendAuthMessage();
  }, [wsConnected, ws, authSent]);

  // Send create quiz message when quiz is loaded AND auth is successful
  useEffect(() => {
    if (wsConnected && ws && quiz && quizId && authSuccess && !quizCreated) {
      console.log('üéÆ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–∏–∑–∞...');
      const createQuizMessage = {quiz: "FrDJQ2INCzyCSyWFbXlv", group: "BJwLRRsHfCaUxNzIEc8P"}
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CREATE_QUIZ:', createQuizMessage);
      ws.send(JSON.stringify(createQuizMessage));
      setQuizCreated(true);
    }
  }, [wsConnected, ws, quiz, quizId, authSuccess, quizCreated]);

  // Timer countdown
  useEffect(() => {
    let interval: NodeJS.Timeout;
    if (timerActive && timeLeft > 0) {
      interval = setInterval(() => {
        setTimeLeft((prevTime) => prevTime - 1);
      }, 1000);
    } else if (timeLeft === 0 && timerActive) {
      console.log('‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!');
      setTimerActive(false);
    }
    return () => clearInterval(interval);
  }, [timerActive, timeLeft]);

  // Function to start the quiz
  const startQuiz = () => {
    if (ws && !quizStarted) {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–≤–∏–∑...');
      const startMessage = { start: true };
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º START:', startMessage);
      ws.send(JSON.stringify(startMessage));
      setQuizStarted(true);
    }
  };

  // Function to go to next question or show final results
  const nextQuestion = () => {
    if (ws) {
      const isLastQuestion = currentQuestionNumber >= questions.length;
      
      if (isLastQuestion) {
        console.log('üèÅ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...');
        const showResultsMessage = { show_results: true };
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SHOW_RESULTS:', showResultsMessage);
        ws.send(JSON.stringify(showResultsMessage));
      } else {
        console.log('‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É...');
        const nextMessage = { next: true };
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º NEXT:', nextMessage);
        ws.send(JSON.stringify(nextMessage));
      }
      
      setRoundResults(null); // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    }
  };

  // Check user authentication and role
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      if (!user) {
        navigate('/auth');
        return;
      }

      // Check if user is teacher
      try {
        const { collection: firestoreCollection, query: firestoreQuery, where: firestoreWhere, getDocs: firestoreGetDocs } = await import('firebase/firestore');
        const q = firestoreQuery(firestoreCollection(db, 'users'), firestoreWhere('userId', '==', user.uid));
        const querySnapshot = await firestoreGetDocs(q);
        
        if (querySnapshot.empty) {
          navigate('/auth');
          return;
        }
        
        const userData = querySnapshot.docs[0].data();
        setIsTeacher(userData.isTeacher);
        
        if (!userData.isTeacher) {
          alert('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—è –º–æ–≥—É—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∫–≤–∏–∑—ã.');
          navigate('/');
          return;
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        navigate('/auth');
        return;
      }

      // Load quiz
      if (quizId) {
        await loadQuiz(quizId, user.uid);
      }
      
      setLoading(false);
    });

    return () => unsubscribe();
  }, [quizId, navigate]);

  const loadQuiz = async (id: string, userId: string) => {
    try {
      // Get quiz data
      const quizDoc = await getDoc(doc(db, 'quizes', id));
      if (!quizDoc.exists()) {
        alert('–ö–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        navigate('/');
        return;
      }

      const quizData = quizDoc.data() as Quiz;
      
      // Check if quiz belongs to current user
      if (quizData.owner !== userId) {
        alert('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∫–≤–∏–∑–∞');
        navigate('/');
        return;
      }

      setQuiz({ ...quizData, id });

      // Load questions
      if (quizData.questions && quizData.questions.length > 0) {
        const loadedQuestions: Question[] = [];
        
        for (const questionId of quizData.questions) {
          try {
            const questionDoc = await getDoc(doc(db, 'questions', questionId));
            if (questionDoc.exists()) {
              const questionData = questionDoc.data();
              loadedQuestions.push({
                id: questionId,
                question: questionData.question || '',
                options: questionData.options || ['', '', '', ''],
                correct: questionData.correct || [],
                type: questionData.type || 'single',
                points: questionData.points || 'regular',
                timeLimit: questionData.timeLimit || 60,
              });
            }
          } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–∞ ${questionId}:`, error);
          }
        }
        
        setQuestions(loadedQuestions);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–≤–∏–∑–∞:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–≤–∏–∑–∞');
      navigate('/');
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen w-full flex items-center justify-center">
        <div className="text-lg">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </div>
    );
  }

  if (!quiz) {
    return (
      <div className="min-h-screen w-full flex items-center justify-center">
        <div className="text-lg text-red-600">–ö–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen w-full montserrat-600 bg-gray-50">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <GraduationCap className="h-8 w-8 text-blue-600 mr-3" />
              <div>
                <h1 className="text-2xl font-bold text-gray-900">{quiz.title}</h1>
                <p className="text-gray-600">{questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤</p>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <div className="flex items-center text-gray-600">
                <Users className="h-5 w-5 mr-2" />
                <span>–£—á–∞—Å—Ç–Ω–∏–∫–∏: {players.length}</span>
              </div>
              <div className={`flex items-center px-3 py-1 rounded-full text-sm ${
                wsConnected 
                  ? 'bg-green-100 text-green-800' 
                  : 'bg-red-100 text-red-800'
              }`}>
                <div className={`w-2 h-2 rounded-full mr-2 ${
                  wsConnected ? 'bg-green-500' : 'bg-red-500'
                }`}></div>
                {wsConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
              </div>
              <Button
                onClick={() => navigate('/')}
                variant="outline"
                className="cursor-pointer"
              >
                –ù–∞–∑–∞–¥
              </Button>
            </div>
          </div>
        </div>

        {/* Main content */}
        <div className="bg-white rounded-lg shadow-md p-8 text-center">
          {gameResults ? (
            /* Final Results Display */
            <GameResults results={gameResults} />
          ) : roundResults ? (
            /* Round Results Display */
            <RoundResults 
              results={roundResults} 
              onNextQuestion={nextQuestion} 
              isLastQuestion={currentQuestionNumber >= questions.length}
            />
          ) : currentQuestion ? (
            /* Question Display */
            <QuizContent questionData={currentQuestion} timeLeft={timeLeft} />
          ) : (
            /* Waiting Screen */
            <div>
              <div className="mb-6">
                <h2 className="text-3xl font-bold text-gray-900 mb-4">–ö–≤–∏–∑ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é!</h2>
                <p className="text-gray-600 mb-6">
                  –ö–≤–∏–∑ "{quiz.title}" —Å–æ–¥–µ—Ä–∂–∏—Ç {questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤
                </p>
              </div>
            
              {/* Game Code Display */}
              {gameCode ? (
                <div className="mb-6">
                  <p className="text-lg font-semibold text-gray-700 mb-2">–ö–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤:</p>
                  <div className="bg-blue-100 text-blue-800 px-6 py-3 rounded-lg text-2xl font-mono font-bold inline-block">
                    {gameCode}
                  </div>
                  <p className="text-sm text-gray-500 mt-2">–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –∫–æ–¥–æ–º —Å –∏–≥—Ä–æ–∫–∞–º–∏</p>
                  
                  {players.length > 0 && (
                    <div className="mt-4">
                      <p className="text-lg font-semibold text-gray-700 mb-2">–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:</p>
                      <div className="flex flex-wrap gap-2">
                        {players.map((player, index) => (
                          <span key={index} className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm">
                            {player}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              ) : (
                <div className="mb-6">
                  <p className="text-lg font-semibold text-gray-700 mb-2">–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã...</p>
                  <div className="bg-yellow-100 text-yellow-800 px-6 py-3 rounded-lg text-lg">
                    {wsConnected ? '–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' : '–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'}
                  </div>
                </div>
              )}
            </div>
          )}
          
          {!currentQuestion && !roundResults && !gameResults && (
            <>
              <div className="space-y-4 mb-8">
                <div className="flex items-center justify-center text-gray-600">
                  <Clock className="h-5 w-5 mr-2" />
                  <span>–û–±—â–µ–µ –≤—Ä–µ–º—è: {questions.reduce((total, q) => total + q.timeLimit, 0)} —Å–µ–∫—É–Ω–¥</span>
                </div>
              </div>

              {/* Start Quiz Button - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–≥—Ä–æ–∫–∏ */}
              {players.length > 0 && !quizStarted && (
                <div className="mb-8">
                  <Button
                    onClick={startQuiz}
                    className="bg-green-600 hover:bg-green-700 px-8 py-3 text-lg cursor-pointer"
                    disabled={!wsConnected}
                  >
                    <Play className="h-5 w-5 mr-2" />
                    –ù–∞—á–∞—Ç—å –∫–≤–∏–∑
                  </Button>
                  <p className="text-sm text-gray-500 mt-2">
                    {players.length} –∏–≥—Ä–æ–∫{players.length === 1 ? '' : players.length < 5 ? '–∞' : '–æ–≤'} –≥–æ—Ç–æ–≤{players.length === 1 ? '' : players.length < 5 ? '—ã' : '—ã'} –∫ –∏–≥—Ä–µ
                  </p>
                </div>
              )}

              {/* Quiz Started Status */}
              {quizStarted && (
                <div className="mb-8">
                  <div className="bg-green-100 text-green-800 px-6 py-3 rounded-lg text-lg text-center">
                    <Play className="h-6 w-6 mx-auto mb-2" />
                    –ö–≤–∏–∑ –∑–∞–ø—É—â–µ–Ω!
                  </div>
                </div>
              )}

              <div className="text-sm text-gray-500">
                <p>–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {wsConnected ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ'}</p>
                <p>–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {authSent ? (authSuccess ? '‚úÖ –£—Å–ø–µ—à–Ω–∞' : '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞') : '‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'}</p>
                <p>–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã: {quizCreated ? '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' : (authSuccess ? '‚è≥ –ì–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ' : '‚ùå –û–∂–∏–¥–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏')}</p>
                <p>–°—Ç–∞—Ç—É—Å –∫–≤–∏–∑–∞: {quizStarted ? 'üöÄ –ó–∞–ø—É—â–µ–Ω' : (players.length > 0 ? '‚è≥ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É' : '‚ùå –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤')}</p>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default HostQuiz;